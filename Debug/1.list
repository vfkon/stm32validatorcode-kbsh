
1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000467c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800494c  0800494c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004954  08004954  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004954  08004954  00014954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004958  08004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800495c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  2000000c  08004968  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08004968  00020578  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e254  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fb6  00000000  00000000  0002e28e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  00030248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  00030e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027974  00000000  00000000  00031990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab48  00000000  00000000  00059304  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f86f9  00000000  00000000  00063e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c545  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d8  00000000  00000000  0015c5c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800485c 	.word	0x0800485c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800485c 	.word	0x0800485c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <getCode>:
	else if(0){
			return 0;
		}
}

_Bool getCode(char a){
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	if(a =='1'){
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b31      	cmp	r3, #49	; 0x31
 8000546:	d101      	bne.n	800054c <getCode+0x14>
		return paymentOptionA;
 8000548:	2301      	movs	r3, #1
 800054a:	e005      	b.n	8000558 <getCode+0x20>
	}
	else if(a =='0'){
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b30      	cmp	r3, #48	; 0x30
 8000550:	d101      	bne.n	8000556 <getCode+0x1e>
			return paymentOptionB;
 8000552:	2301      	movs	r3, #1
 8000554:	e000      	b.n	8000558 <getCode+0x20>
	}
	return 0;
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <sendInfo>:

_Bool sendInfo(uint8_t* recieve_str){
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b0ae      	sub	sp, #184	; 0xb8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	uint8_t strAT[] = "AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"";
 800056c:	4b4d      	ldr	r3, [pc, #308]	; (80006a4 <sendInfo+0x140>)
 800056e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800057c:	c407      	stmia	r4!, {r0, r1, r2}
 800057e:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit_IT (USART2, strAT, 50);
 8000580:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000584:	2232      	movs	r2, #50	; 0x32
 8000586:	4619      	mov	r1, r3
 8000588:	4847      	ldr	r0, [pc, #284]	; (80006a8 <sendInfo+0x144>)
 800058a:	f003 f9ab 	bl	80038e4 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 800058e:	2064      	movs	r0, #100	; 0x64
 8000590:	f000 fe50 	bl	8001234 <HAL_Delay>
	uint8_t strAT1[] = "AT+SAPBR=3,1,\"APN\",\"internet.tele2.ru\"";
 8000594:	4b45      	ldr	r3, [pc, #276]	; (80006ac <sendInfo+0x148>)
 8000596:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800059a:	461d      	mov	r5, r3
 800059c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005a8:	6020      	str	r0, [r4, #0]
 80005aa:	3404      	adds	r4, #4
 80005ac:	8021      	strh	r1, [r4, #0]
 80005ae:	3402      	adds	r4, #2
 80005b0:	0c0b      	lsrs	r3, r1, #16
 80005b2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit_IT (USART2, strAT1, 50);
 80005b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005b8:	2232      	movs	r2, #50	; 0x32
 80005ba:	4619      	mov	r1, r3
 80005bc:	483a      	ldr	r0, [pc, #232]	; (80006a8 <sendInfo+0x144>)
 80005be:	f003 f991 	bl	80038e4 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80005c2:	2064      	movs	r0, #100	; 0x64
 80005c4:	f000 fe36 	bl	8001234 <HAL_Delay>
	uint8_t strAT2[]=	    "AT+SAPBR=3,1,\"USER\",\"tele2\"";
 80005c8:	4b39      	ldr	r3, [pc, #228]	; (80006b0 <sendInfo+0x14c>)
 80005ca:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit_IT (USART2, strAT2, 50);
 80005dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005e0:	2232      	movs	r2, #50	; 0x32
 80005e2:	4619      	mov	r1, r3
 80005e4:	4830      	ldr	r0, [pc, #192]	; (80006a8 <sendInfo+0x144>)
 80005e6:	f003 f97d 	bl	80038e4 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80005ea:	2064      	movs	r0, #100	; 0x64
 80005ec:	f000 fe22 	bl	8001234 <HAL_Delay>
	uint8_t strAT3[] =	    "AT+SAPBR=3,1,\"PWD\",\"tele2\"";
 80005f0:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <sendInfo+0x150>)
 80005f2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	c403      	stmia	r4!, {r0, r1}
 8000602:	8022      	strh	r2, [r4, #0]
 8000604:	3402      	adds	r4, #2
 8000606:	0c13      	lsrs	r3, r2, #16
 8000608:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit_IT (USART2, strAT3, 50);
 800060a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800060e:	2232      	movs	r2, #50	; 0x32
 8000610:	4619      	mov	r1, r3
 8000612:	4825      	ldr	r0, [pc, #148]	; (80006a8 <sendInfo+0x144>)
 8000614:	f003 f966 	bl	80038e4 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000618:	2064      	movs	r0, #100	; 0x64
 800061a:	f000 fe0b 	bl	8001234 <HAL_Delay>
	uint8_t strAT4[]=	    "AT+SAPBR=1,1";  //Устанавливаем GPRS соединение
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <sendInfo+0x154>)
 8000620:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000626:	c407      	stmia	r4!, {r0, r1, r2}
 8000628:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit_IT (USART2, strAT4, 50);
 800062a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062e:	2232      	movs	r2, #50	; 0x32
 8000630:	4619      	mov	r1, r3
 8000632:	481d      	ldr	r0, [pc, #116]	; (80006a8 <sendInfo+0x144>)
 8000634:	f003 f956 	bl	80038e4 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f000 fdfb 	bl	8001234 <HAL_Delay>
	uint8_t strAT5[] =	    "AT+HTTPINIT";  //Инициализация http сервиса
 800063e:	4a1f      	ldr	r2, [pc, #124]	; (80006bc <sendInfo+0x158>)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	ca07      	ldmia	r2, {r0, r1, r2}
 8000646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit_IT (USART2, strAT5, 50);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2232      	movs	r2, #50	; 0x32
 8000650:	4619      	mov	r1, r3
 8000652:	4815      	ldr	r0, [pc, #84]	; (80006a8 <sendInfo+0x144>)
 8000654:	f003 f946 	bl	80038e4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065c:	f000 fdea 	bl	8001234 <HAL_Delay>
	uint8_t strAT6[] =	    "AT+HTTPPARA=\"CID\",1";
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <sendInfo+0x15c>)
 8000662:	f107 0408 	add.w	r4, r7, #8
 8000666:	461d      	mov	r5, r3
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	682b      	ldr	r3, [r5, #0]
 800066e:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_IT (USART2, strAT6, 50);
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2232      	movs	r2, #50	; 0x32
 8000676:	4619      	mov	r1, r3
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <sendInfo+0x144>)
 800067a:	f003 f933 	bl	80038e4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800067e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000682:	f000 fdd7 	bl	8001234 <HAL_Delay>
	HAL_UART_Transmit_IT (USART2, recieve_str, 50);
 8000686:	2232      	movs	r2, #50	; 0x32
 8000688:	6879      	ldr	r1, [r7, #4]
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <sendInfo+0x144>)
 800068c:	f003 f92a 	bl	80038e4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000694:	f000 fdce 	bl	8001234 <HAL_Delay>
	return 1;
 8000698:	2301      	movs	r3, #1
}
 800069a:	4618      	mov	r0, r3
 800069c:	37b8      	adds	r7, #184	; 0xb8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bdb0      	pop	{r4, r5, r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08004874 	.word	0x08004874
 80006a8:	40004400 	.word	0x40004400
 80006ac:	08004894 	.word	0x08004894
 80006b0:	080048bc 	.word	0x080048bc
 80006b4:	080048d8 	.word	0x080048d8
 80006b8:	080048f4 	.word	0x080048f4
 80006bc:	08004904 	.word	0x08004904
 80006c0:	08004910 	.word	0x08004910

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0a6      	sub	sp, #152	; 0x98
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fd56 	bl	800117a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f90d 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fa79 	bl	8000bc8 <MX_GPIO_Init>
  MX_ETH_Init();
 80006d6:	f000 f9a1 	bl	8000a1c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006da:	f000 fa17 	bl	8000b0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006de:	f000 fa45 	bl	8000b6c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80006e2:	f000 f9e3 	bl	8000aac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t str[]="Start";
 80006e6:	4a7d      	ldr	r2, [pc, #500]	; (80008dc <main+0x218>)
 80006e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80006ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f0:	6018      	str	r0, [r3, #0]
 80006f2:	3304      	adds	r3, #4
 80006f4:	8019      	strh	r1, [r3, #0]
  	//while (1)
  uint8_t recieve_str[100];
    //{
  HAL_UART_Transmit(USART3, str, 1, 5);
 80006f6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80006fa:	2305      	movs	r3, #5
 80006fc:	2201      	movs	r2, #1
 80006fe:	4878      	ldr	r0, [pc, #480]	; (80008e0 <main+0x21c>)
 8000700:	f002 ff92 	bl	8003628 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000708:	f000 fd94 	bl	8001234 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if( HAL_UART_Receive(USART3, str, 1, 3) == HAL_OK )
 800070c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000710:	2303      	movs	r3, #3
 8000712:	2201      	movs	r2, #1
 8000714:	4872      	ldr	r0, [pc, #456]	; (80008e0 <main+0x21c>)
 8000716:	f003 f818 	bl	800374a <HAL_UART_Receive>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f5      	bne.n	800070c <main+0x48>
	  {
		  uint8_t check;
		  for(int i = 0; i < 100; i++){
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000726:	e0d3      	b.n	80008d0 <main+0x20c>
			  if(recieve_str[i]='a')
 8000728:	f107 0214 	add.w	r2, r7, #20
 800072c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000730:	4413      	add	r3, r2
 8000732:	2261      	movs	r2, #97	; 0x61
 8000734:	701a      	strb	r2, [r3, #0]
				  if (getCode(recieve_str[i+1])){
 8000736:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800073a:	3301      	adds	r3, #1
 800073c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000740:	4413      	add	r3, r2
 8000742:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fef6 	bl	8000538 <getCode>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d02b      	beq.n	80007aa <main+0xe6>
					  uint8_t str[] = "a1";
 8000752:	4a64      	ldr	r2, [pc, #400]	; (80008e4 <main+0x220>)
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	6812      	ldr	r2, [r2, #0]
 800075a:	4611      	mov	r1, r2
 800075c:	8019      	strh	r1, [r3, #0]
 800075e:	3302      	adds	r3, #2
 8000760:	0c12      	lsrs	r2, r2, #16
 8000762:	701a      	strb	r2, [r3, #0]
					  for (uint32_t i=0; i < 2; i++){
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800076a:	e00f      	b.n	800078c <main+0xc8>
						   check ^= str[i];
 800076c:	f107 0210 	add.w	r2, r7, #16
 8000770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000774:	4413      	add	r3, r2
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800077c:	4053      	eors	r3, r2
 800077e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					  for (uint32_t i=0; i < 2; i++){
 8000782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000786:	3301      	adds	r3, #1
 8000788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800078c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000790:	2b01      	cmp	r3, #1
 8000792:	d9eb      	bls.n	800076c <main+0xa8>
					  	}
					  str[2] = check;
 8000794:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000798:	74bb      	strb	r3, [r7, #18]
					  HAL_UART_Transmit_IT(USART3, str, 3);
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	2203      	movs	r2, #3
 80007a0:	4619      	mov	r1, r3
 80007a2:	484f      	ldr	r0, [pc, #316]	; (80008e0 <main+0x21c>)
 80007a4:	f003 f89e 	bl	80038e4 <HAL_UART_Transmit_IT>
 80007a8:	e02a      	b.n	8000800 <main+0x13c>
				  }
				  else {
						  uint8_t str[] = "a0";
 80007aa:	4a4f      	ldr	r2, [pc, #316]	; (80008e8 <main+0x224>)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	6812      	ldr	r2, [r2, #0]
 80007b2:	4611      	mov	r1, r2
 80007b4:	8019      	strh	r1, [r3, #0]
 80007b6:	3302      	adds	r3, #2
 80007b8:	0c12      	lsrs	r2, r2, #16
 80007ba:	701a      	strb	r2, [r3, #0]
						  for (uint32_t i=0; i < 2; i++){
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80007c2:	e00f      	b.n	80007e4 <main+0x120>
								  check ^= str[i];
 80007c4:	f107 020c 	add.w	r2, r7, #12
 80007c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007cc:	4413      	add	r3, r2
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80007d4:	4053      	eors	r3, r2
 80007d6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						  for (uint32_t i=0; i < 2; i++){
 80007da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007de:	3301      	adds	r3, #1
 80007e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80007e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d9eb      	bls.n	80007c4 <main+0x100>
							}
						  str[2] = check;
 80007ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80007f0:	73bb      	strb	r3, [r7, #14]
						  HAL_UART_Transmit_IT(USART3, str, 3);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2203      	movs	r2, #3
 80007f8:	4619      	mov	r1, r3
 80007fa:	4839      	ldr	r0, [pc, #228]	; (80008e0 <main+0x21c>)
 80007fc:	f003 f872 	bl	80038e4 <HAL_UART_Transmit_IT>
					  }
			  if(recieve_str[i]='b')
 8000800:	f107 0214 	add.w	r2, r7, #20
 8000804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000808:	4413      	add	r3, r2
 800080a:	2262      	movs	r2, #98	; 0x62
 800080c:	701a      	strb	r2, [r3, #0]
			  				  if (sendInfo(recieve_str)){
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fea6 	bl	8000564 <sendInfo>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d02b      	beq.n	8000876 <main+0x1b2>
			  					  uint8_t str[] = "a1";
 800081e:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <main+0x220>)
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	4611      	mov	r1, r2
 8000828:	8019      	strh	r1, [r3, #0]
 800082a:	3302      	adds	r3, #2
 800082c:	0c12      	lsrs	r2, r2, #16
 800082e:	701a      	strb	r2, [r3, #0]
			  					  for (uint32_t i=0; i < 2; i++){
 8000830:	2300      	movs	r3, #0
 8000832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000836:	e00f      	b.n	8000858 <main+0x194>
			  					  		  check ^= str[i];
 8000838:	f107 0208 	add.w	r2, r7, #8
 800083c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000840:	4413      	add	r3, r2
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000848:	4053      	eors	r3, r2
 800084a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  					  for (uint32_t i=0; i < 2; i++){
 800084e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000852:	3301      	adds	r3, #1
 8000854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800085c:	2b01      	cmp	r3, #1
 800085e:	d9eb      	bls.n	8000838 <main+0x174>
			  					  	}
			  					 str[2] = check;
 8000860:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000864:	72bb      	strb	r3, [r7, #10]
			  					HAL_UART_Transmit_IT(USART3, str, 3);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2203      	movs	r2, #3
 800086c:	4619      	mov	r1, r3
 800086e:	481c      	ldr	r0, [pc, #112]	; (80008e0 <main+0x21c>)
 8000870:	f003 f838 	bl	80038e4 <HAL_UART_Transmit_IT>
 8000874:	e027      	b.n	80008c6 <main+0x202>
			  				  }
			  				  else {
			  						  uint8_t str[] = "a0";
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <main+0x224>)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	6812      	ldr	r2, [r2, #0]
 800087c:	4611      	mov	r1, r2
 800087e:	8019      	strh	r1, [r3, #0]
 8000880:	3302      	adds	r3, #2
 8000882:	0c12      	lsrs	r2, r2, #16
 8000884:	701a      	strb	r2, [r3, #0]
			  						  for (uint32_t i=0; i < 2; i++){
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800088c:	e00e      	b.n	80008ac <main+0x1e8>
			  								  check ^= str[i];
 800088e:	1d3a      	adds	r2, r7, #4
 8000890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000894:	4413      	add	r3, r2
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800089c:	4053      	eors	r3, r2
 800089e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  						  for (uint32_t i=0; i < 2; i++){
 80008a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008a6:	3301      	adds	r3, #1
 80008a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80008ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d9ec      	bls.n	800088e <main+0x1ca>
			  							}
			  						 str[2] = check;
 80008b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80008b8:	71bb      	strb	r3, [r7, #6]
			  						HAL_UART_Transmit_IT(USART3, str, 3);
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2203      	movs	r2, #3
 80008be:	4619      	mov	r1, r3
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <main+0x21c>)
 80008c2:	f003 f80f 	bl	80038e4 <HAL_UART_Transmit_IT>
		  for(int i = 0; i < 100; i++){
 80008c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008ca:	3301      	adds	r3, #1
 80008cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80008d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008d4:	2b63      	cmp	r3, #99	; 0x63
 80008d6:	f77f af27 	ble.w	8000728 <main+0x64>
	  if( HAL_UART_Receive(USART3, str, 1, 3) == HAL_OK )
 80008da:	e717      	b.n	800070c <main+0x48>
 80008dc:	08004924 	.word	0x08004924
 80008e0:	40004800 	.word	0x40004800
 80008e4:	0800492c 	.word	0x0800492c
 80008e8:	08004930 	.word	0x08004930

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0b8      	sub	sp, #224	; 0xe0
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008f6:	2234      	movs	r2, #52	; 0x34
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 ffa6 	bl	800484c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2290      	movs	r2, #144	; 0x90
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f003 ff97 	bl	800484c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800091e:	f001 fd09 	bl	8002334 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b3b      	ldr	r3, [pc, #236]	; (8000a10 <SystemClock_Config+0x124>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a3a      	ldr	r2, [pc, #232]	; (8000a10 <SystemClock_Config+0x124>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <SystemClock_Config+0x124>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800093a:	4b36      	ldr	r3, [pc, #216]	; (8000a14 <SystemClock_Config+0x128>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000942:	4a34      	ldr	r2, [pc, #208]	; (8000a14 <SystemClock_Config+0x128>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6013      	str	r3, [r2, #0]
 800094a:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <SystemClock_Config+0x128>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000956:	2301      	movs	r3, #1
 8000958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800095c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800096e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000972:	2304      	movs	r3, #4
 8000974:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000978:	2360      	movs	r3, #96	; 0x60
 800097a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000984:	2304      	movs	r3, #4
 8000986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fd30 	bl	80023f4 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800099a:	f000 f9b7 	bl	8000d0c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800099e:	f001 fcd9 	bl	8002354 <HAL_PWREx_EnableOverDrive>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009a8:	f000 f9b0 	bl	8000d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	230f      	movs	r3, #15
 80009ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009d0:	2103      	movs	r1, #3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 ffbc 	bl	8002950 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80009de:	f000 f995 	bl	8000d0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <SystemClock_Config+0x12c>)
 80009e4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 f9a1 	bl	8002d40 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000a04:	f000 f982 	bl	8000d0c <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	37e0      	adds	r7, #224	; 0xe0
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000
 8000a18:	00200180 	.word	0x00200180

08000a1c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <MX_ETH_Init+0x8c>)
 8000a24:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a32:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a3a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	3302      	adds	r3, #2
 8000a5a:	22e1      	movs	r2, #225	; 0xe1
 8000a5c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	3303      	adds	r3, #3
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	3305      	adds	r3, #5
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a8e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a92:	f000 fcd7 	bl	8001444 <HAL_ETH_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ETH_Init+0x84>
  {
    Error_Handler();
 8000a9c:	f000 f936 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000052c 	.word	0x2000052c
 8000aa8:	40028000 	.word	0x40028000

08000aac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART2_UART_Init+0x58>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <MX_USART2_UART_Init+0x5c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART2_UART_Init+0x58>)
 8000ab8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART2_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USART2_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART2_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART2_UART_Init+0x58>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART2_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART2_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART2_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART2_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART2_UART_Init+0x58>)
 8000af0:	f002 fd4c 	bl	800358c <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 f907 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200004ac 	.word	0x200004ac
 8000b08:	40004400 	.word	0x40004400

08000b0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_USART3_UART_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b50:	f002 fd1c 	bl	800358c <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 f8d7 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000028 	.word	0x20000028
 8000b68:	40004800 	.word	0x40004800

08000b6c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7a:	2206      	movs	r2, #6
 8000b7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	f001 fa77 	bl	80020a2 <HAL_PCD_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bba:	f000 f8a7 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000a8 	.word	0x200000a8

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	; 0x30
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b46      	ldr	r3, [pc, #280]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a45      	ldr	r2, [pc, #276]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf6:	4b40      	ldr	r3, [pc, #256]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a3f      	ldr	r2, [pc, #252]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b3d      	ldr	r3, [pc, #244]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a39      	ldr	r2, [pc, #228]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a33      	ldr	r2, [pc, #204]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b31      	ldr	r3, [pc, #196]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a2d      	ldr	r2, [pc, #180]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <MX_GPIO_Init+0x130>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c74:	4821      	ldr	r0, [pc, #132]	; (8000cfc <MX_GPIO_Init+0x134>)
 8000c76:	f001 f9fb 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2140      	movs	r1, #64	; 0x40
 8000c7e:	4820      	ldr	r0, [pc, #128]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c80:	f001 f9f6 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	481b      	ldr	r0, [pc, #108]	; (8000d08 <MX_GPIO_Init+0x140>)
 8000c9a:	f001 f83f 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c9e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4811      	ldr	r0, [pc, #68]	; (8000cfc <MX_GPIO_Init+0x134>)
 8000cb8:	f001 f830 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cbc:	2340      	movs	r3, #64	; 0x40
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000cd4:	f001 f822 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000cec:	f001 f816 	bl	8001d1c <HAL_GPIO_Init>

}
 8000cf0:	bf00      	nop
 8000cf2:	3730      	adds	r7, #48	; 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40021800 	.word	0x40021800
 8000d04:	10110000 	.word	0x10110000
 8000d08:	40020800 	.word	0x40020800

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <Error_Handler+0x6>

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_MspInit+0x44>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_MspInit+0x44>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_MspInit+0x44>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x44>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x44>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x44>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	; 0x38
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a4e      	ldr	r2, [pc, #312]	; (8000eb4 <HAL_ETH_MspInit+0x158>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	f040 8096 	bne.w	8000eac <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d80:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a4c      	ldr	r2, [pc, #304]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d94:	623b      	str	r3, [r7, #32]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	4a46      	ldr	r2, [pc, #280]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000d9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000da2:	6313      	str	r3, [r2, #48]	; 0x30
 8000da4:	4b44      	ldr	r3, [pc, #272]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a40      	ldr	r2, [pc, #256]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000db6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc8:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	4a3a      	ldr	r2, [pc, #232]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a34      	ldr	r2, [pc, #208]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	4a2e      	ldr	r2, [pc, #184]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	6313      	str	r3, [r2, #48]	; 0x30
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_ETH_MspInit+0x15c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e28:	2332      	movs	r3, #50	; 0x32
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e38:	230b      	movs	r3, #11
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	481e      	ldr	r0, [pc, #120]	; (8000ebc <HAL_ETH_MspInit+0x160>)
 8000e44:	f000 ff6a 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e48:	2386      	movs	r3, #134	; 0x86
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e58:	230b      	movs	r3, #11
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <HAL_ETH_MspInit+0x164>)
 8000e64:	f000 ff5a 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7a:	230b      	movs	r3, #11
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	480f      	ldr	r0, [pc, #60]	; (8000ec4 <HAL_ETH_MspInit+0x168>)
 8000e86:	f000 ff49 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9c:	230b      	movs	r3, #11
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <HAL_ETH_MspInit+0x16c>)
 8000ea8:	f000 ff38 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3738      	adds	r7, #56	; 0x38
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40028000 	.word	0x40028000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40021800 	.word	0x40021800

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a3c      	ldr	r2, [pc, #240]	; (8000fdc <HAL_UART_MspInit+0x110>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d144      	bne.n	8000f78 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eee:	4b3c      	ldr	r3, [pc, #240]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a3b      	ldr	r2, [pc, #236]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a35      	ldr	r2, [pc, #212]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b33      	ldr	r3, [pc, #204]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f36:	2308      	movs	r3, #8
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f46:	2307      	movs	r3, #7
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4824      	ldr	r0, [pc, #144]	; (8000fe4 <HAL_UART_MspInit+0x118>)
 8000f52:	f000 fee3 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f56:	2320      	movs	r3, #32
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f66:	2307      	movs	r3, #7
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481d      	ldr	r0, [pc, #116]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000f72:	f000 fed3 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f76:	e02d      	b.n	8000fd4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_UART_MspInit+0x120>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d128      	bne.n	8000fd4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_UART_MspInit+0x114>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000fd0:	f000 fea4 	bl	8001d1c <HAL_GPIO_Init>
}
 8000fd4:	bf00      	nop
 8000fd6:	3730      	adds	r7, #48	; 0x30
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40004400 	.word	0x40004400
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40004800 	.word	0x40004800

08000ff0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001010:	d141      	bne.n	8001096 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_PCD_MspInit+0xb0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a22      	ldr	r2, [pc, #136]	; (80010a0 <HAL_PCD_MspInit+0xb0>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_PCD_MspInit+0xb0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800102a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800103c:	230a      	movs	r3, #10
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4817      	ldr	r0, [pc, #92]	; (80010a4 <HAL_PCD_MspInit+0xb4>)
 8001048:	f000 fe68 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800104c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <HAL_PCD_MspInit+0xb4>)
 8001062:	f000 fe5b 	bl	8001d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_PCD_MspInit+0xb0>)
 8001068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106a:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_PCD_MspInit+0xb0>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001070:	6353      	str	r3, [r2, #52]	; 0x34
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_PCD_MspInit+0xb0>)
 8001074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_PCD_MspInit+0xb0>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_PCD_MspInit+0xb0>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_PCD_MspInit+0xb0>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <NMI_Handler+0x4>

080010ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <MemManage_Handler+0x4>

080010ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <BusFault_Handler+0x4>

080010c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <UsageFault_Handler+0x4>

080010c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f4:	f000 f87e 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <SystemInit+0x28>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <SystemInit+0x28>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SystemInit+0x28>)
 8001112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001116:	609a      	str	r2, [r3, #8]
#endif
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800112c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>
  ldr  r2, =_sbss
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001146:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001152:	f7ff ffd3 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001156:	f003 fb55 	bl	8004804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fab3 	bl	80006c4 <main>
  bx  lr    
 800115e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001164:	0800495c 	.word	0x0800495c
  ldr  r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800116c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001170:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001174:	20000578 	.word	0x20000578

08001178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC_IRQHandler>

0800117a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117e:	2003      	movs	r0, #3
 8001180:	f000 f92c 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001184:	2000      	movs	r0, #0
 8001186:	f000 f805 	bl	8001194 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800118a:	f7ff fdc3 	bl	8000d14 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f939 	bl	800142a <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f90f 	bl	80013f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000004 	.word	0x20000004

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008
 8001218:	20000574 	.word	0x20000574

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000574 	.word	0x20000574

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff ffee 	bl	800121c <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_Delay+0x40>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125a:	bf00      	nop
 800125c:	f7ff ffde 	bl	800121c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000008 	.word	0x20000008

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <__NVIC_SetPriorityGrouping+0x40>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <__NVIC_SetPriorityGrouping+0x40>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00
 80012bc:	05fa0000 	.word	0x05fa0000

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff47 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff5c 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff8e 	bl	8001330 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5d 	bl	80012dc <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffb0 	bl	8001398 <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001454:	4ba9      	ldr	r3, [pc, #676]	; (80016fc <HAL_ETH_Init+0x2b8>)
 8001456:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e183      	b.n	8001772 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fc6c 	bl	8000d5c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001484:	4b9e      	ldr	r3, [pc, #632]	; (8001700 <HAL_ETH_Init+0x2bc>)
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	4a9d      	ldr	r2, [pc, #628]	; (8001700 <HAL_ETH_Init+0x2bc>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148e:	6453      	str	r3, [r2, #68]	; 0x44
 8001490:	4b9b      	ldr	r3, [pc, #620]	; (8001700 <HAL_ETH_Init+0x2bc>)
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800149c:	4b99      	ldr	r3, [pc, #612]	; (8001704 <HAL_ETH_Init+0x2c0>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a98      	ldr	r2, [pc, #608]	; (8001704 <HAL_ETH_Init+0x2c0>)
 80014a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014a6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014a8:	4b96      	ldr	r3, [pc, #600]	; (8001704 <HAL_ETH_Init+0x2c0>)
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4994      	ldr	r1, [pc, #592]	; (8001704 <HAL_ETH_Init+0x2c0>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014cc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014ce:	f7ff fea5 	bl	800121c <HAL_GetTick>
 80014d2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014d4:	e011      	b.n	80014fa <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80014d6:	f7ff fea1 	bl	800121c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014e4:	d909      	bls.n	80014fa <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2203      	movs	r2, #3
 80014ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e13b      	b.n	8001772 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1e4      	bne.n	80014d6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f023 031c 	bic.w	r3, r3, #28
 800151a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800151c:	f001 fbdc 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8001520:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4a78      	ldr	r2, [pc, #480]	; (8001708 <HAL_ETH_Init+0x2c4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d908      	bls.n	800153c <HAL_ETH_Init+0xf8>
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4a77      	ldr	r2, [pc, #476]	; (800170c <HAL_ETH_Init+0x2c8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d804      	bhi.n	800153c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e027      	b.n	800158c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	4a73      	ldr	r2, [pc, #460]	; (800170c <HAL_ETH_Init+0x2c8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d908      	bls.n	8001556 <HAL_ETH_Init+0x112>
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	4a72      	ldr	r2, [pc, #456]	; (8001710 <HAL_ETH_Init+0x2cc>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d804      	bhi.n	8001556 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f043 030c 	orr.w	r3, r3, #12
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	e01a      	b.n	800158c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	4a6d      	ldr	r2, [pc, #436]	; (8001710 <HAL_ETH_Init+0x2cc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d903      	bls.n	8001566 <HAL_ETH_Init+0x122>
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4a6c      	ldr	r2, [pc, #432]	; (8001714 <HAL_ETH_Init+0x2d0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d911      	bls.n	800158a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4a6a      	ldr	r2, [pc, #424]	; (8001714 <HAL_ETH_Init+0x2d0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d908      	bls.n	8001580 <HAL_ETH_Init+0x13c>
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4a69      	ldr	r2, [pc, #420]	; (8001718 <HAL_ETH_Init+0x2d4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d804      	bhi.n	8001580 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	e005      	b.n	800158c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	e000      	b.n	800158c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800158a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001594:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001598:	2100      	movs	r1, #0
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f956 	bl	800184c <HAL_ETH_WritePHYRegister>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80015aa:	6939      	ldr	r1, [r7, #16]
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f9b3 	bl	8001918 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0d9      	b.n	8001772 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80015be:	20ff      	movs	r0, #255	; 0xff
 80015c0:	f7ff fe38 	bl	8001234 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80a7 	beq.w	800171c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80015ce:	f7ff fe25 	bl	800121c <HAL_GetTick>
 80015d2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	461a      	mov	r2, r3
 80015da:	2101      	movs	r1, #1
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f8cd 	bl	800177c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80015e2:	f7ff fe1b 	bl	800121c <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d90f      	bls.n	8001614 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015f8:	6939      	ldr	r1, [r7, #16]
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f98c 	bl	8001918 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0ae      	b.n	8001772 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0da      	beq.n	80015d4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800161e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001622:	2100      	movs	r1, #0
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f911 	bl	800184c <HAL_ETH_WritePHYRegister>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001634:	6939      	ldr	r1, [r7, #16]
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f96e 	bl	8001918 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001644:	2301      	movs	r3, #1
 8001646:	e094      	b.n	8001772 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001648:	f7ff fde8 	bl	800121c <HAL_GetTick>
 800164c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	461a      	mov	r2, r3
 8001654:	2101      	movs	r1, #1
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f890 	bl	800177c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800165c:	f7ff fdde 	bl	800121c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	; 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d90f      	bls.n	800168e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001672:	6939      	ldr	r1, [r7, #16]
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f94f 	bl	8001918 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e071      	b.n	8001772 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0da      	beq.n	800164e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	461a      	mov	r2, r3
 800169e:	211f      	movs	r1, #31
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f86b 	bl	800177c <HAL_ETH_ReadPHYRegister>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00b      	beq.n	80016c4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016b0:	6939      	ldr	r1, [r7, #16]
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f930 	bl	8001918 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016c0:	2301      	movs	r3, #1
 80016c2:	e056      	b.n	8001772 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d004      	beq.n	80016d8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	e002      	b.n	80016de <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	e037      	b.n	8001760 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e032      	b.n	8001760 <HAL_ETH_Init+0x31c>
 80016fa:	bf00      	nop
 80016fc:	03938700 	.word	0x03938700
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	01312cff 	.word	0x01312cff
 800170c:	02160ebf 	.word	0x02160ebf
 8001710:	039386ff 	.word	0x039386ff
 8001714:	05f5e0ff 	.word	0x05f5e0ff
 8001718:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800172c:	4313      	orrs	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	2100      	movs	r1, #0
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f889 	bl	800184c <HAL_ETH_WritePHYRegister>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00b      	beq.n	8001758 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001744:	6939      	ldr	r1, [r7, #16]
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f8e6 	bl	8001918 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e00c      	b.n	8001772 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001758:	f640 70ff 	movw	r0, #4095	; 0xfff
 800175c:	f7ff fd6a 	bl	8001234 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001760:	6939      	ldr	r1, [r7, #16]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f8d8 	bl	8001918 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop

0800177c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	460b      	mov	r3, r1
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b82      	cmp	r3, #130	; 0x82
 800179c:	d101      	bne.n	80017a2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800179e:	2302      	movs	r3, #2
 80017a0:	e050      	b.n	8001844 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2282      	movs	r2, #130	; 0x82
 80017a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 031c 	and.w	r3, r3, #28
 80017b8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8a1b      	ldrh	r3, [r3, #16]
 80017be:	02db      	lsls	r3, r3, #11
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80017c8:	897b      	ldrh	r3, [r7, #10]
 80017ca:	019b      	lsls	r3, r3, #6
 80017cc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f023 0302 	bic.w	r3, r3, #2
 80017dc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017ee:	f7ff fd15 	bl	800121c <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017f4:	e015      	b.n	8001822 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80017f6:	f7ff fd11 	bl	800121c <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d309      	bcc.n	800181a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e014      	b.n	8001844 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1e4      	bne.n	80017f6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	b29b      	uxth	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	460b      	mov	r3, r1
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b42      	cmp	r3, #66	; 0x42
 800186c:	d101      	bne.n	8001872 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800186e:	2302      	movs	r3, #2
 8001870:	e04e      	b.n	8001910 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2242      	movs	r2, #66	; 0x42
 8001876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 031c 	and.w	r3, r3, #28
 8001888:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8a1b      	ldrh	r3, [r3, #16]
 800188e:	02db      	lsls	r3, r3, #11
 8001890:	b29b      	uxth	r3, r3
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001898:	897b      	ldrh	r3, [r7, #10]
 800189a:	019b      	lsls	r3, r3, #6
 800189c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018c8:	f7ff fca8 	bl	800121c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018ce:	e015      	b.n	80018fc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80018d0:	f7ff fca4 	bl	800121c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018de:	d309      	bcc.n	80018f4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e00d      	b.n	8001910 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1e4      	bne.n	80018d0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b0b0      	sub	sp, #192	; 0xc0
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001934:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800193c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001946:	2300      	movs	r3, #0
 8001948:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d103      	bne.n	8001966 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800195e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001962:	663b      	str	r3, [r7, #96]	; 0x60
 8001964:	e001      	b.n	800196a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800196a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001974:	2300      	movs	r3, #0
 8001976:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001984:	2340      	movs	r3, #64	; 0x40
 8001986:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80019ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019f0:	4bab      	ldr	r3, [pc, #684]	; (8001ca0 <ETH_MACDMAConfig+0x388>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80019f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80019fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80019fc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80019fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001a00:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001a04:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001a0a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001a0e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001a12:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001a18:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001a1c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001a1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001a20:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001a22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001a24:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001a28:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001a2c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001a2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a32:	4313      	orrs	r3, r2
 8001a34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a40:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff fbf1 	bl	8001234 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a5a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a60:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001a64:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001a66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001a6a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001a70:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001a76:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001a7c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001a80:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001a88:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a8a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f7ff fbcc 	bl	8001234 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aa4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001aae:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ab8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ac4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ac8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001acc:	4013      	ands	r3, r2
 8001ace:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ad2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ad6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ad8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001adc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ae2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001ae8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001aee:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001af0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001af4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001af6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b08:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7ff fb8d 	bl	8001234 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b22:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b24:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001b28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7ff fb78 	bl	8001234 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b4c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b56:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001b5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b60:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001b72:	2304      	movs	r3, #4
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ba2:	4413      	add	r3, r2
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001baa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <ETH_MACDMAConfig+0x38c>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bb6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bba:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001bbc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001bbe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001bc0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001bc2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001bc4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001bc6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001bc8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001bca:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001bce:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001bd2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001bd6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001bea:	4413      	add	r3, r2
 8001bec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bf0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001bfa:	4413      	add	r3, r2
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff fb16 	bl	8001234 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c10:	4413      	add	r3, r2
 8001c12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c16:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c1c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001c20:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c24:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001c28:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c2c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001c2e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001c32:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c40:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f7ff faef 	bl	8001234 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c62:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10d      	bne.n	8001c88 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	f241 031c 	movw	r3, #4124	; 0x101c
 8001c74:	4413      	add	r3, r2
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6811      	ldr	r1, [r2, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <ETH_MACDMAConfig+0x390>)
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	f241 031c 	movw	r3, #4124	; 0x101c
 8001c84:	440b      	add	r3, r1
 8001c86:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	2100      	movs	r1, #0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f80b 	bl	8001cac <ETH_MACAddressConfig>
}
 8001c96:	bf00      	nop
 8001c98:	37c0      	adds	r7, #192	; 0xc0
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	ff20810f 	.word	0xff20810f
 8001ca4:	f8de3f23 	.word	0xf8de3f23
 8001ca8:	00010040 	.word	0x00010040

08001cac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3305      	adds	r3, #5
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	3204      	adds	r2, #4
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <ETH_MACAddressConfig+0x68>)
 8001cce:	4413      	add	r3, r2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3303      	adds	r3, #3
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	061a      	lsls	r2, r3, #24
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	041b      	lsls	r3, r3, #16
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3301      	adds	r3, #1
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	7812      	ldrb	r2, [r2, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <ETH_MACAddressConfig+0x6c>)
 8001cfe:	4413      	add	r3, r2
 8001d00:	461a      	mov	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	6013      	str	r3, [r2, #0]
}
 8001d06:	bf00      	nop
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40028040 	.word	0x40028040
 8001d18:	40028044 	.word	0x40028044

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e175      	b.n	8002028 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8164 	bne.w	8002022 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d00b      	beq.n	8001d7a <HAL_GPIO_Init+0x5e>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d007      	beq.n	8001d7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d6e:	2b11      	cmp	r3, #17
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b12      	cmp	r3, #18
 8001d78:	d130      	bne.n	8001ddc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db0:	2201      	movs	r2, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 0201 	and.w	r2, r3, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x100>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b12      	cmp	r3, #18
 8001e1a:	d123      	bne.n	8001e64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	08da      	lsrs	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3208      	adds	r2, #8
 8001e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	69b9      	ldr	r1, [r7, #24]
 8001e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80be 	beq.w	8002022 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	4b65      	ldr	r3, [pc, #404]	; (800203c <HAL_GPIO_Init+0x320>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a64      	ldr	r2, [pc, #400]	; (800203c <HAL_GPIO_Init+0x320>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b62      	ldr	r3, [pc, #392]	; (800203c <HAL_GPIO_Init+0x320>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ebe:	4a60      	ldr	r2, [pc, #384]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a57      	ldr	r2, [pc, #348]	; (8002044 <HAL_GPIO_Init+0x328>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d037      	beq.n	8001f5a <HAL_GPIO_Init+0x23e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a56      	ldr	r2, [pc, #344]	; (8002048 <HAL_GPIO_Init+0x32c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d031      	beq.n	8001f56 <HAL_GPIO_Init+0x23a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a55      	ldr	r2, [pc, #340]	; (800204c <HAL_GPIO_Init+0x330>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d02b      	beq.n	8001f52 <HAL_GPIO_Init+0x236>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a54      	ldr	r2, [pc, #336]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d025      	beq.n	8001f4e <HAL_GPIO_Init+0x232>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a53      	ldr	r2, [pc, #332]	; (8002054 <HAL_GPIO_Init+0x338>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01f      	beq.n	8001f4a <HAL_GPIO_Init+0x22e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a52      	ldr	r2, [pc, #328]	; (8002058 <HAL_GPIO_Init+0x33c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d019      	beq.n	8001f46 <HAL_GPIO_Init+0x22a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a51      	ldr	r2, [pc, #324]	; (800205c <HAL_GPIO_Init+0x340>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a50      	ldr	r2, [pc, #320]	; (8002060 <HAL_GPIO_Init+0x344>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00d      	beq.n	8001f3e <HAL_GPIO_Init+0x222>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4f      	ldr	r2, [pc, #316]	; (8002064 <HAL_GPIO_Init+0x348>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d007      	beq.n	8001f3a <HAL_GPIO_Init+0x21e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4e      	ldr	r2, [pc, #312]	; (8002068 <HAL_GPIO_Init+0x34c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001f32:	2309      	movs	r3, #9
 8001f34:	e012      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f36:	230a      	movs	r3, #10
 8001f38:	e010      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	e00e      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f3e:	2307      	movs	r3, #7
 8001f40:	e00c      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f42:	2306      	movs	r3, #6
 8001f44:	e00a      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f46:	2305      	movs	r3, #5
 8001f48:	e008      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e004      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	69fa      	ldr	r2, [r7, #28]
 8001f5e:	f002 0203 	and.w	r2, r2, #3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4093      	lsls	r3, r2
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f6c:	4934      	ldr	r1, [pc, #208]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f7a:	4b3c      	ldr	r3, [pc, #240]	; (800206c <HAL_GPIO_Init+0x350>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9e:	4a33      	ldr	r2, [pc, #204]	; (800206c <HAL_GPIO_Init+0x350>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fa4:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_GPIO_Init+0x350>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc8:	4a28      	ldr	r2, [pc, #160]	; (800206c <HAL_GPIO_Init+0x350>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_GPIO_Init+0x350>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <HAL_GPIO_Init+0x350>)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_GPIO_Init+0x350>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800201c:	4a13      	ldr	r2, [pc, #76]	; (800206c <HAL_GPIO_Init+0x350>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3301      	adds	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	2b0f      	cmp	r3, #15
 800202c:	f67f ae86 	bls.w	8001d3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002030:	bf00      	nop
 8002032:	3724      	adds	r7, #36	; 0x24
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800
 8002060:	40021c00 	.word	0x40021c00
 8002064:	40022000 	.word	0x40022000
 8002068:	40022400 	.word	0x40022400
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a4:	b08f      	sub	sp, #60	; 0x3c
 80020a6:	af0a      	add	r7, sp, #40	; 0x28
 80020a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e116      	b.n	80022e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe ff8e 	bl	8000ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2203      	movs	r2, #3
 80020d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f002 f92e 	bl	8004354 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	687e      	ldr	r6, [r7, #4]
 8002100:	466d      	mov	r5, sp
 8002102:	f106 0410 	add.w	r4, r6, #16
 8002106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800210c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002112:	e885 0003 	stmia.w	r5, {r0, r1}
 8002116:	1d33      	adds	r3, r6, #4
 8002118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211a:	6838      	ldr	r0, [r7, #0]
 800211c:	f002 f8c2 	bl	80042a4 <USB_CoreInit>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0d7      	b.n	80022e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f002 f91c 	bl	8004376 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e04a      	b.n	80021da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	333d      	adds	r3, #61	; 0x3d
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	333c      	adds	r3, #60	; 0x3c
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	b298      	uxth	r0, r3
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3342      	adds	r3, #66	; 0x42
 8002180:	4602      	mov	r2, r0
 8002182:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	333f      	adds	r3, #63	; 0x3f
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	3344      	adds	r3, #68	; 0x44
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3348      	adds	r3, #72	; 0x48
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	3350      	adds	r3, #80	; 0x50
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	3301      	adds	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3af      	bcc.n	8002144 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e044      	b.n	8002274 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	3301      	adds	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	429a      	cmp	r2, r3
 800227c:	d3b5      	bcc.n	80021ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	687e      	ldr	r6, [r7, #4]
 8002286:	466d      	mov	r5, sp
 8002288:	f106 0410 	add.w	r4, r6, #16
 800228c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800228e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002294:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002298:	e885 0003 	stmia.w	r5, {r0, r1}
 800229c:	1d33      	adds	r3, r6, #4
 800229e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a0:	6838      	ldr	r0, [r7, #0]
 80022a2:	f002 f893 	bl	80043cc <USB_DevInit>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e014      	b.n	80022e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f80b 	bl	80022ec <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f002 fa45 	bl	800476a <USB_DevDisconnect>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080022ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_PCDEx_ActivateLPM+0x44>)
 800231c:	4313      	orrs	r3, r2
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	10000003 	.word	0x10000003

08002334 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800233e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40007000 	.word	0x40007000

08002354 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b23      	ldr	r3, [pc, #140]	; (80023ec <HAL_PWREx_EnableOverDrive+0x98>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a22      	ldr	r2, [pc, #136]	; (80023ec <HAL_PWREx_EnableOverDrive+0x98>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b20      	ldr	r3, [pc, #128]	; (80023ec <HAL_PWREx_EnableOverDrive+0x98>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002382:	f7fe ff4b 	bl	800121c <HAL_GetTick>
 8002386:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002388:	e009      	b.n	800239e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800238a:	f7fe ff47 	bl	800121c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002398:	d901      	bls.n	800239e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e022      	b.n	80023e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023aa:	d1ee      	bne.n	800238a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b8:	f7fe ff30 	bl	800121c <HAL_GetTick>
 80023bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023be:	e009      	b.n	80023d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023c0:	f7fe ff2c 	bl	800121c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ce:	d901      	bls.n	80023d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e007      	b.n	80023e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023e0:	d1ee      	bne.n	80023c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40007000 	.word	0x40007000

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023fc:	2300      	movs	r3, #0
 80023fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e29b      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8087 	beq.w	8002526 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002418:	4b96      	ldr	r3, [pc, #600]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b04      	cmp	r3, #4
 8002422:	d00c      	beq.n	800243e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002424:	4b93      	ldr	r3, [pc, #588]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d112      	bne.n	8002456 <HAL_RCC_OscConfig+0x62>
 8002430:	4b90      	ldr	r3, [pc, #576]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800243c:	d10b      	bne.n	8002456 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243e:	4b8d      	ldr	r3, [pc, #564]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d06c      	beq.n	8002524 <HAL_RCC_OscConfig+0x130>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d168      	bne.n	8002524 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e275      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x7a>
 8002460:	4b84      	ldr	r3, [pc, #528]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a83      	ldr	r2, [pc, #524]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e02e      	b.n	80024cc <HAL_RCC_OscConfig+0xd8>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x9c>
 8002476:	4b7f      	ldr	r3, [pc, #508]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7e      	ldr	r2, [pc, #504]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 800247c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7b      	ldr	r2, [pc, #492]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0xd8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0xc0>
 800249a:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a75      	ldr	r2, [pc, #468]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b73      	ldr	r3, [pc, #460]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a72      	ldr	r2, [pc, #456]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xd8>
 80024b4:	4b6f      	ldr	r3, [pc, #444]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a6e      	ldr	r2, [pc, #440]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b6c      	ldr	r3, [pc, #432]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6b      	ldr	r2, [pc, #428]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fea2 	bl	800121c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe fe9e 	bl	800121c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e229      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b61      	ldr	r3, [pc, #388]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0xe8>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fe8e 	bl	800121c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7fe fe8a 	bl	800121c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e215      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	4b57      	ldr	r3, [pc, #348]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x110>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d069      	beq.n	8002606 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002532:	4b50      	ldr	r3, [pc, #320]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b08      	cmp	r3, #8
 8002548:	d11c      	bne.n	8002584 <HAL_RCC_OscConfig+0x190>
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x17a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e1e9      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	493d      	ldr	r1, [pc, #244]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	e040      	b.n	8002606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d023      	beq.n	80025d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258c:	4b39      	ldr	r3, [pc, #228]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a38      	ldr	r2, [pc, #224]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fe40 	bl	800121c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7fe fe3c 	bl	800121c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1c7      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	4b30      	ldr	r3, [pc, #192]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025be:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4929      	ldr	r1, [pc, #164]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
 80025d2:	e018      	b.n	8002606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a26      	ldr	r2, [pc, #152]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fe1c 	bl	800121c <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e8:	f7fe fe18 	bl	800121c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1a3      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d038      	beq.n	8002684 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d019      	beq.n	800264e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	4a15      	ldr	r2, [pc, #84]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7fe fdf9 	bl	800121c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262e:	f7fe fdf5 	bl	800121c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e180      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x23a>
 800264c:	e01a      	b.n	8002684 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <HAL_RCC_OscConfig+0x280>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7fe fddf 	bl	800121c <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	e00a      	b.n	8002678 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002662:	f7fe fddb 	bl	800121c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d903      	bls.n	8002678 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e166      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
 8002674:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ee      	bne.n	8002662 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a4 	beq.w	80027da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b8c      	ldr	r3, [pc, #560]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10d      	bne.n	80026ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a88      	ldr	r2, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b86      	ldr	r3, [pc, #536]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b6:	2301      	movs	r3, #1
 80026b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ba:	4b83      	ldr	r3, [pc, #524]	; (80028c8 <HAL_RCC_OscConfig+0x4d4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d118      	bne.n	80026f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026c6:	4b80      	ldr	r3, [pc, #512]	; (80028c8 <HAL_RCC_OscConfig+0x4d4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7f      	ldr	r2, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x4d4>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fda3 	bl	800121c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7fe fd9f 	bl	800121c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b64      	cmp	r3, #100	; 0x64
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e12a      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ec:	4b76      	ldr	r3, [pc, #472]	; (80028c8 <HAL_RCC_OscConfig+0x4d4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x31a>
 8002700:	4b70      	ldr	r3, [pc, #448]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a6f      	ldr	r2, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	e02d      	b.n	800276a <HAL_RCC_OscConfig+0x376>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x33c>
 8002716:	4b6b      	ldr	r3, [pc, #428]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a6a      	ldr	r2, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
 8002722:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4a67      	ldr	r2, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	6713      	str	r3, [r2, #112]	; 0x70
 800272e:	e01c      	b.n	800276a <HAL_RCC_OscConfig+0x376>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b05      	cmp	r3, #5
 8002736:	d10c      	bne.n	8002752 <HAL_RCC_OscConfig+0x35e>
 8002738:	4b62      	ldr	r3, [pc, #392]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a61      	ldr	r2, [pc, #388]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	4b5f      	ldr	r3, [pc, #380]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a5e      	ldr	r2, [pc, #376]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
 8002750:	e00b      	b.n	800276a <HAL_RCC_OscConfig+0x376>
 8002752:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a5b      	ldr	r2, [pc, #364]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
 800275e:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002764:	f023 0304 	bic.w	r3, r3, #4
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d015      	beq.n	800279e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe fd53 	bl	800121c <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe fd4f 	bl	800121c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0d8      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002790:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ee      	beq.n	800277a <HAL_RCC_OscConfig+0x386>
 800279c:	e014      	b.n	80027c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279e:	f7fe fd3d 	bl	800121c <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe fd39 	bl	800121c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e0c2      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027bc:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ee      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d105      	bne.n	80027da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a3c      	ldr	r2, [pc, #240]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 80027d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80ae 	beq.w	8002940 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e4:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d06d      	beq.n	80028cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d14b      	bne.n	8002890 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f8:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a31      	ldr	r2, [pc, #196]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fd0a 	bl	800121c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe fd06 	bl	800121c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e091      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	019b      	lsls	r3, r3, #6
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	3b01      	subs	r3, #1
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	071b      	lsls	r3, r3, #28
 8002856:	491b      	ldr	r1, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fcd8 	bl	800121c <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fcd4 	bl	800121c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e05f      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x47c>
 800288e:	e057      	b.n	8002940 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 8002896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fcbe 	bl	800121c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe fcba 	bl	800121c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e045      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b6:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_RCC_OscConfig+0x4d0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x4b0>
 80028c2:	e03d      	b.n	8002940 <HAL_RCC_OscConfig+0x54c>
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028cc:	4b1f      	ldr	r3, [pc, #124]	; (800294c <HAL_RCC_OscConfig+0x558>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d030      	beq.n	800293c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d129      	bne.n	800293c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d122      	bne.n	800293c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002902:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002904:	4293      	cmp	r3, r2
 8002906:	d119      	bne.n	800293c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	3b01      	subs	r3, #1
 8002916:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d10f      	bne.n	800293c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d107      	bne.n	800293c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800

08002950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0d0      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b6a      	ldr	r3, [pc, #424]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d910      	bls.n	8002998 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b67      	ldr	r3, [pc, #412]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 020f 	bic.w	r2, r3, #15
 800297e:	4965      	ldr	r1, [pc, #404]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0b8      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b0:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	494d      	ldr	r1, [pc, #308]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d040      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d115      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e073      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06b      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a32:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4936      	ldr	r1, [pc, #216]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a44:	f7fe fbea 	bl	800121c <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7fe fbe6 	bl	800121c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e053      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 020c 	and.w	r2, r3, #12
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1eb      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d210      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 020f 	bic.w	r2, r3, #15
 8002a8a:	4922      	ldr	r1, [pc, #136]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e032      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4916      	ldr	r1, [pc, #88]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ae2:	f000 f821 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <HAL_RCC_ClockConfig+0x1cc>)
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
 8002af6:	fa21 f303 	lsr.w	r3, r1, r3
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1d0>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1d4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fb46 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023c00 	.word	0x40023c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08004934 	.word	0x08004934
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000004 	.word	0x20000004

08002b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	2300      	movs	r3, #0
 8002b38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3e:	4b63      	ldr	r3, [pc, #396]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d007      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x32>
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x38>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 80b4 	bne.w	8002cbc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b5e      	ldr	r3, [pc, #376]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b56:	60bb      	str	r3, [r7, #8]
      break;
 8002b58:	e0b3      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5a:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b5c:	60bb      	str	r3, [r7, #8]
      break;
 8002b5e:	e0b0      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b60:	4b5a      	ldr	r3, [pc, #360]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b68:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b6a:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d04a      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b55      	ldr	r3, [pc, #340]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	f04f 0400 	mov.w	r4, #0
 8002b80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	ea03 0501 	and.w	r5, r3, r1
 8002b8c:	ea04 0602 	and.w	r6, r4, r2
 8002b90:	4629      	mov	r1, r5
 8002b92:	4632      	mov	r2, r6
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	f04f 0400 	mov.w	r4, #0
 8002b9c:	0154      	lsls	r4, r2, #5
 8002b9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ba2:	014b      	lsls	r3, r1, #5
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	1b49      	subs	r1, r1, r5
 8002baa:	eb62 0206 	sbc.w	r2, r2, r6
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	f04f 0400 	mov.w	r4, #0
 8002bb6:	0194      	lsls	r4, r2, #6
 8002bb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bbc:	018b      	lsls	r3, r1, #6
 8002bbe:	1a5b      	subs	r3, r3, r1
 8002bc0:	eb64 0402 	sbc.w	r4, r4, r2
 8002bc4:	f04f 0100 	mov.w	r1, #0
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	00e2      	lsls	r2, r4, #3
 8002bce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bd2:	00d9      	lsls	r1, r3, #3
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4614      	mov	r4, r2
 8002bd8:	195b      	adds	r3, r3, r5
 8002bda:	eb44 0406 	adc.w	r4, r4, r6
 8002bde:	f04f 0100 	mov.w	r1, #0
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	0262      	lsls	r2, r4, #9
 8002be8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002bec:	0259      	lsls	r1, r3, #9
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f04f 0400 	mov.w	r4, #0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	f7fd fb1a 	bl	8000238 <__aeabi_uldivmod>
 8002c04:	4603      	mov	r3, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e049      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0c:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	f04f 0400 	mov.w	r4, #0
 8002c16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	ea03 0501 	and.w	r5, r3, r1
 8002c22:	ea04 0602 	and.w	r6, r4, r2
 8002c26:	4629      	mov	r1, r5
 8002c28:	4632      	mov	r2, r6
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	f04f 0400 	mov.w	r4, #0
 8002c32:	0154      	lsls	r4, r2, #5
 8002c34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c38:	014b      	lsls	r3, r1, #5
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	1b49      	subs	r1, r1, r5
 8002c40:	eb62 0206 	sbc.w	r2, r2, r6
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	f04f 0400 	mov.w	r4, #0
 8002c4c:	0194      	lsls	r4, r2, #6
 8002c4e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c52:	018b      	lsls	r3, r1, #6
 8002c54:	1a5b      	subs	r3, r3, r1
 8002c56:	eb64 0402 	sbc.w	r4, r4, r2
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	00e2      	lsls	r2, r4, #3
 8002c64:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c68:	00d9      	lsls	r1, r3, #3
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	195b      	adds	r3, r3, r5
 8002c70:	eb44 0406 	adc.w	r4, r4, r6
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	02a2      	lsls	r2, r4, #10
 8002c7e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c82:	0299      	lsls	r1, r3, #10
 8002c84:	460b      	mov	r3, r1
 8002c86:	4614      	mov	r4, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f04f 0400 	mov.w	r4, #0
 8002c92:	461a      	mov	r2, r3
 8002c94:	4623      	mov	r3, r4
 8002c96:	f7fd facf 	bl	8000238 <__aeabi_uldivmod>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	460c      	mov	r4, r1
 8002c9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	60bb      	str	r3, [r7, #8]
      break;
 8002cba:	e002      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cbe:	60bb      	str	r3, [r7, #8]
      break;
 8002cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	007a1200 	.word	0x007a1200

08002cd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_RCC_GetHCLKFreq+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000000 	.word	0x20000000

08002cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf4:	f7ff fff0 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002cf8:	4601      	mov	r1, r0
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	0a9b      	lsrs	r3, r3, #10
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	4a03      	ldr	r2, [pc, #12]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40023800 	.word	0x40023800
 8002d14:	08004944 	.word	0x08004944

08002d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d1c:	f7ff ffdc 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002d20:	4601      	mov	r1, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0b5b      	lsrs	r3, r3, #13
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4a03      	ldr	r2, [pc, #12]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	08004944 	.word	0x08004944

08002d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d68:	4b69      	ldr	r3, [pc, #420]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a68      	ldr	r2, [pc, #416]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d72:	6093      	str	r3, [r2, #8]
 8002d74:	4b66      	ldr	r3, [pc, #408]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	4964      	ldr	r1, [pc, #400]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d017      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d9a:	4b5d      	ldr	r3, [pc, #372]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da8:	4959      	ldr	r1, [pc, #356]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db8:	d101      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d017      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dd6:	4b4e      	ldr	r3, [pc, #312]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ddc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	494a      	ldr	r1, [pc, #296]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df4:	d101      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002df6:	2301      	movs	r3, #1
 8002df8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e12:	2301      	movs	r3, #1
 8002e14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 808b 	beq.w	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	4b3a      	ldr	r3, [pc, #232]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	4a39      	ldr	r2, [pc, #228]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e30:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e3c:	4b35      	ldr	r3, [pc, #212]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e48:	f7fe f9e8 	bl	800121c <HAL_GetTick>
 8002e4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e50:	f7fe f9e4 	bl	800121c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e38d      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e62:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e6e:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d035      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d02e      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e8c:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e96:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a1a      	ldr	r2, [pc, #104]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002eae:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eb4:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d114      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe f9ac 	bl	800121c <HAL_GetTick>
 8002ec4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe f9a8 	bl	800121c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e34f      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ee      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef6:	d111      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f06:	400b      	ands	r3, r1
 8002f08:	4901      	ldr	r1, [pc, #4]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
 8002f0e:	e00b      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40007000 	.word	0x40007000
 8002f18:	0ffffcff 	.word	0x0ffffcff
 8002f1c:	4bb3      	ldr	r3, [pc, #716]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4ab2      	ldr	r2, [pc, #712]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f26:	6093      	str	r3, [r2, #8]
 8002f28:	4bb0      	ldr	r3, [pc, #704]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f34:	49ad      	ldr	r1, [pc, #692]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f46:	4ba9      	ldr	r3, [pc, #676]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f4c:	4aa7      	ldr	r2, [pc, #668]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f56:	4ba5      	ldr	r3, [pc, #660]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	49a2      	ldr	r1, [pc, #648]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f74:	4b9d      	ldr	r3, [pc, #628]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f82:	499a      	ldr	r1, [pc, #616]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f96:	4b95      	ldr	r3, [pc, #596]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa4:	4991      	ldr	r1, [pc, #580]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fb8:	4b8c      	ldr	r3, [pc, #560]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc6:	4989      	ldr	r1, [pc, #548]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fda:	4b84      	ldr	r3, [pc, #528]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4980      	ldr	r1, [pc, #512]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ffc:	4b7b      	ldr	r3, [pc, #492]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	f023 0203 	bic.w	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	4978      	ldr	r1, [pc, #480]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800301e:	4b73      	ldr	r3, [pc, #460]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	f023 020c 	bic.w	r2, r3, #12
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302c:	496f      	ldr	r1, [pc, #444]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	4967      	ldr	r1, [pc, #412]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003062:	4b62      	ldr	r3, [pc, #392]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003070:	495e      	ldr	r1, [pc, #376]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003084:	4b59      	ldr	r3, [pc, #356]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	4956      	ldr	r1, [pc, #344]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030a6:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	494d      	ldr	r1, [pc, #308]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030c8:	4b48      	ldr	r3, [pc, #288]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	4945      	ldr	r1, [pc, #276]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030ea:	4b40      	ldr	r3, [pc, #256]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f8:	493c      	ldr	r1, [pc, #240]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800310c:	4b37      	ldr	r3, [pc, #220]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800311a:	4934      	ldr	r1, [pc, #208]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d011      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800312e:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800313c:	492b      	ldr	r1, [pc, #172]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800314c:	d101      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800314e:	2301      	movs	r3, #1
 8003150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800315e:	2301      	movs	r3, #1
 8003160:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800316e:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	491b      	ldr	r1, [pc, #108]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003190:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a0:	4912      	ldr	r1, [pc, #72]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80031b4:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c4:	4909      	ldr	r1, [pc, #36]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00f      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	e002      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	4985      	ldr	r1, [pc, #532]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003204:	4b80      	ldr	r3, [pc, #512]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800320a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003214:	497c      	ldr	r1, [pc, #496]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d005      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800322a:	f040 80d6 	bne.w	80033da <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a75      	ldr	r2, [pc, #468]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003234:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323a:	f7fd ffef 	bl	800121c <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003242:	f7fd ffeb 	bl	800121c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b64      	cmp	r3, #100	; 0x64
 800324e:	d901      	bls.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e194      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003254:	4b6c      	ldr	r3, [pc, #432]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d021      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11d      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003274:	4b64      	ldr	r3, [pc, #400]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003282:	4b61      	ldr	r3, [pc, #388]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003288:	0e1b      	lsrs	r3, r3, #24
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	019a      	lsls	r2, r3, #6
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	041b      	lsls	r3, r3, #16
 800329a:	431a      	orrs	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	061b      	lsls	r3, r3, #24
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	071b      	lsls	r3, r3, #28
 80032a8:	4957      	ldr	r1, [pc, #348]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02e      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032da:	d129      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032dc:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	0c1b      	lsrs	r3, r3, #16
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f0:	0f1b      	lsrs	r3, r3, #28
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	019a      	lsls	r2, r3, #6
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	061b      	lsls	r3, r3, #24
 800330a:	431a      	orrs	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	071b      	lsls	r3, r3, #28
 8003310:	493d      	ldr	r1, [pc, #244]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003318:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800331a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331e:	f023 021f 	bic.w	r2, r3, #31
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	3b01      	subs	r3, #1
 8003328:	4937      	ldr	r1, [pc, #220]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01d      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800333c:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003342:	0e1b      	lsrs	r3, r3, #24
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800334a:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800334c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003350:	0f1b      	lsrs	r3, r3, #28
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	019a      	lsls	r2, r3, #6
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	041b      	lsls	r3, r3, #16
 8003364:	431a      	orrs	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	431a      	orrs	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	071b      	lsls	r3, r3, #28
 8003370:	4925      	ldr	r1, [pc, #148]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d011      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	019a      	lsls	r2, r3, #6
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	061b      	lsls	r3, r3, #24
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	071b      	lsls	r3, r3, #28
 80033a0:	4919      	ldr	r1, [pc, #100]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033a8:	4b17      	ldr	r3, [pc, #92]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a16      	ldr	r2, [pc, #88]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b4:	f7fd ff32 	bl	800121c <HAL_GetTick>
 80033b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033bc:	f7fd ff2e 	bl	800121c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0d7      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	f040 80cd 	bne.w	800357c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a08      	ldr	r2, [pc, #32]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ee:	f7fd ff15 	bl	800121c <HAL_GetTick>
 80033f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033f4:	e00a      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033f6:	f7fd ff11 	bl	800121c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b64      	cmp	r3, #100	; 0x64
 8003402:	d903      	bls.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0ba      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003408:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800340c:	4b5e      	ldr	r3, [pc, #376]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003418:	d0ed      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02e      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d12a      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003442:	4b51      	ldr	r3, [pc, #324]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003450:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	0f1b      	lsrs	r3, r3, #28
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	019a      	lsls	r2, r3, #6
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	061b      	lsls	r3, r3, #24
 8003470:	431a      	orrs	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	071b      	lsls	r3, r3, #28
 8003476:	4944      	ldr	r1, [pc, #272]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800347e:	4b42      	ldr	r3, [pc, #264]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003484:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	493d      	ldr	r1, [pc, #244]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d022      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ac:	d11d      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	0e1b      	lsrs	r3, r3, #24
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034bc:	4b32      	ldr	r3, [pc, #200]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	0f1b      	lsrs	r3, r3, #28
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	019a      	lsls	r2, r3, #6
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	061b      	lsls	r3, r3, #24
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	071b      	lsls	r3, r3, #28
 80034e2:	4929      	ldr	r1, [pc, #164]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d028      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	0e1b      	lsrs	r3, r3, #24
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003504:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	0c1b      	lsrs	r3, r3, #16
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	019a      	lsls	r2, r3, #6
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	431a      	orrs	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	071b      	lsls	r3, r3, #28
 800352a:	4917      	ldr	r1, [pc, #92]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	4911      	ldr	r1, [pc, #68]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003554:	f7fd fe62 	bl	800121c <HAL_GetTick>
 8003558:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800355c:	f7fd fe5e 	bl	800121c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e007      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800357a:	d1ef      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e040      	b.n	8003620 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd fc8c 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9e6 	bl	800399c <UART_SetConfig>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e022      	b.n	8003620 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fc84 	bl	8003ef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fd0b 	bl	8004034 <UART_CheckIdleState>
 800361e:	4603      	mov	r3, r0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	2b20      	cmp	r3, #32
 800363e:	d17f      	bne.n	8003740 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_UART_Transmit+0x24>
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e078      	b.n	8003742 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_UART_Transmit+0x36>
 800365a:	2302      	movs	r3, #2
 800365c:	e071      	b.n	8003742 <HAL_UART_Transmit+0x11a>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2221      	movs	r2, #33	; 0x21
 8003670:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003672:	f7fd fdd3 	bl	800121c <HAL_GetTick>
 8003676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003690:	d108      	bne.n	80036a4 <HAL_UART_Transmit+0x7c>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d104      	bne.n	80036a4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e003      	b.n	80036ac <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80036b4:	e02c      	b.n	8003710 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2200      	movs	r2, #0
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fcfc 	bl	80040be <UART_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e038      	b.n	8003742 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10b      	bne.n	80036ee <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	3302      	adds	r3, #2
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	e007      	b.n	80036fe <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	3301      	adds	r3, #1
 80036fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1cc      	bne.n	80036b6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2200      	movs	r2, #0
 8003724:	2140      	movs	r1, #64	; 0x40
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fcc9 	bl	80040be <UART_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e005      	b.n	8003742 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b08a      	sub	sp, #40	; 0x28
 800374e:	af02      	add	r7, sp, #8
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375e:	2b20      	cmp	r3, #32
 8003760:	f040 80ba 	bne.w	80038d8 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_UART_Receive+0x26>
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0b2      	b.n	80038da <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_UART_Receive+0x38>
 800377e:	2302      	movs	r3, #2
 8003780:	e0ab      	b.n	80038da <HAL_UART_Receive+0x190>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2222      	movs	r2, #34	; 0x22
 8003794:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003796:	f7fd fd41 	bl	800121c <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b4:	d10e      	bne.n	80037d4 <HAL_UART_Receive+0x8a>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_UART_Receive+0x80>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037c8:	e02d      	b.n	8003826 <HAL_UART_Receive+0xdc>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d2:	e028      	b.n	8003826 <HAL_UART_Receive+0xdc>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10d      	bne.n	80037f8 <HAL_UART_Receive+0xae>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <HAL_UART_Receive+0xa4>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	22ff      	movs	r2, #255	; 0xff
 80037e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ec:	e01b      	b.n	8003826 <HAL_UART_Receive+0xdc>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	227f      	movs	r2, #127	; 0x7f
 80037f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037f6:	e016      	b.n	8003826 <HAL_UART_Receive+0xdc>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003800:	d10d      	bne.n	800381e <HAL_UART_Receive+0xd4>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d104      	bne.n	8003814 <HAL_UART_Receive+0xca>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	227f      	movs	r2, #127	; 0x7f
 800380e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003812:	e008      	b.n	8003826 <HAL_UART_Receive+0xdc>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	223f      	movs	r2, #63	; 0x3f
 8003818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800381c:	e003      	b.n	8003826 <HAL_UART_Receive+0xdc>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800382c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003836:	d108      	bne.n	800384a <HAL_UART_Receive+0x100>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d104      	bne.n	800384a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	e003      	b.n	8003852 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800385a:	e032      	b.n	80038c2 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2200      	movs	r2, #0
 8003864:	2120      	movs	r1, #32
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 fc29 	bl	80040be <UART_WaitOnFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e031      	b.n	80038da <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10c      	bne.n	8003896 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	b29a      	uxth	r2, r3
 8003884:	8a7b      	ldrh	r3, [r7, #18]
 8003886:	4013      	ands	r3, r2
 8003888:	b29a      	uxth	r2, r3
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	3302      	adds	r3, #2
 8003892:	61bb      	str	r3, [r7, #24]
 8003894:	e00c      	b.n	80038b0 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	b2da      	uxtb	r2, r3
 800389e:	8a7b      	ldrh	r3, [r7, #18]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	4013      	ands	r3, r2
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3301      	adds	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1c6      	bne.n	800385c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e000      	b.n	80038da <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
  }
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d144      	bne.n	8003984 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_UART_Transmit_IT+0x22>
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e03d      	b.n	8003986 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_UART_Transmit_IT+0x34>
 8003914:	2302      	movs	r3, #2
 8003916:	e036      	b.n	8003986 <HAL_UART_Transmit_IT+0xa2>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	88fa      	ldrh	r2, [r7, #6]
 800392a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	88fa      	ldrh	r2, [r7, #6]
 8003932:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2221      	movs	r2, #33	; 0x21
 8003946:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003950:	d107      	bne.n	8003962 <HAL_UART_Transmit_IT+0x7e>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <HAL_UART_Transmit_IT+0xb0>)
 800395e:	665a      	str	r2, [r3, #100]	; 0x64
 8003960:	e002      	b.n	8003968 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <HAL_UART_Transmit_IT+0xb4>)
 8003966:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800397e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	08004227 	.word	0x08004227
 8003998:	080041b5 	.word	0x080041b5

0800399c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4bb1      	ldr	r3, [pc, #708]	; (8003c90 <UART_SetConfig+0x2f4>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	6939      	ldr	r1, [r7, #16]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a9f      	ldr	r2, [pc, #636]	; (8003c94 <UART_SetConfig+0x2f8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d121      	bne.n	8003a60 <UART_SetConfig+0xc4>
 8003a1c:	4b9e      	ldr	r3, [pc, #632]	; (8003c98 <UART_SetConfig+0x2fc>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d816      	bhi.n	8003a58 <UART_SetConfig+0xbc>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <UART_SetConfig+0x94>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a4d 	.word	0x08003a4d
 8003a38:	08003a47 	.word	0x08003a47
 8003a3c:	08003a53 	.word	0x08003a53
 8003a40:	2301      	movs	r3, #1
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e151      	b.n	8003cea <UART_SetConfig+0x34e>
 8003a46:	2302      	movs	r3, #2
 8003a48:	77fb      	strb	r3, [r7, #31]
 8003a4a:	e14e      	b.n	8003cea <UART_SetConfig+0x34e>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	e14b      	b.n	8003cea <UART_SetConfig+0x34e>
 8003a52:	2308      	movs	r3, #8
 8003a54:	77fb      	strb	r3, [r7, #31]
 8003a56:	e148      	b.n	8003cea <UART_SetConfig+0x34e>
 8003a58:	2310      	movs	r3, #16
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	bf00      	nop
 8003a5e:	e144      	b.n	8003cea <UART_SetConfig+0x34e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a8d      	ldr	r2, [pc, #564]	; (8003c9c <UART_SetConfig+0x300>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d134      	bne.n	8003ad4 <UART_SetConfig+0x138>
 8003a6a:	4b8b      	ldr	r3, [pc, #556]	; (8003c98 <UART_SetConfig+0x2fc>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	d829      	bhi.n	8003acc <UART_SetConfig+0x130>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <UART_SetConfig+0xe4>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003acd 	.word	0x08003acd
 8003a88:	08003acd 	.word	0x08003acd
 8003a8c:	08003acd 	.word	0x08003acd
 8003a90:	08003ac1 	.word	0x08003ac1
 8003a94:	08003acd 	.word	0x08003acd
 8003a98:	08003acd 	.word	0x08003acd
 8003a9c:	08003acd 	.word	0x08003acd
 8003aa0:	08003abb 	.word	0x08003abb
 8003aa4:	08003acd 	.word	0x08003acd
 8003aa8:	08003acd 	.word	0x08003acd
 8003aac:	08003acd 	.word	0x08003acd
 8003ab0:	08003ac7 	.word	0x08003ac7
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e117      	b.n	8003cea <UART_SetConfig+0x34e>
 8003aba:	2302      	movs	r3, #2
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e114      	b.n	8003cea <UART_SetConfig+0x34e>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e111      	b.n	8003cea <UART_SetConfig+0x34e>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	77fb      	strb	r3, [r7, #31]
 8003aca:	e10e      	b.n	8003cea <UART_SetConfig+0x34e>
 8003acc:	2310      	movs	r3, #16
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	bf00      	nop
 8003ad2:	e10a      	b.n	8003cea <UART_SetConfig+0x34e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a71      	ldr	r2, [pc, #452]	; (8003ca0 <UART_SetConfig+0x304>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d120      	bne.n	8003b20 <UART_SetConfig+0x184>
 8003ade:	4b6e      	ldr	r3, [pc, #440]	; (8003c98 <UART_SetConfig+0x2fc>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d00f      	beq.n	8003b0c <UART_SetConfig+0x170>
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d802      	bhi.n	8003af6 <UART_SetConfig+0x15a>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <UART_SetConfig+0x164>
 8003af4:	e010      	b.n	8003b18 <UART_SetConfig+0x17c>
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d005      	beq.n	8003b06 <UART_SetConfig+0x16a>
 8003afa:	2b30      	cmp	r3, #48	; 0x30
 8003afc:	d009      	beq.n	8003b12 <UART_SetConfig+0x176>
 8003afe:	e00b      	b.n	8003b18 <UART_SetConfig+0x17c>
 8003b00:	2300      	movs	r3, #0
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e0f1      	b.n	8003cea <UART_SetConfig+0x34e>
 8003b06:	2302      	movs	r3, #2
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e0ee      	b.n	8003cea <UART_SetConfig+0x34e>
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e0eb      	b.n	8003cea <UART_SetConfig+0x34e>
 8003b12:	2308      	movs	r3, #8
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e0e8      	b.n	8003cea <UART_SetConfig+0x34e>
 8003b18:	2310      	movs	r3, #16
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	bf00      	nop
 8003b1e:	e0e4      	b.n	8003cea <UART_SetConfig+0x34e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a5f      	ldr	r2, [pc, #380]	; (8003ca4 <UART_SetConfig+0x308>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d120      	bne.n	8003b6c <UART_SetConfig+0x1d0>
 8003b2a:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <UART_SetConfig+0x2fc>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d00f      	beq.n	8003b58 <UART_SetConfig+0x1bc>
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d802      	bhi.n	8003b42 <UART_SetConfig+0x1a6>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <UART_SetConfig+0x1b0>
 8003b40:	e010      	b.n	8003b64 <UART_SetConfig+0x1c8>
 8003b42:	2b80      	cmp	r3, #128	; 0x80
 8003b44:	d005      	beq.n	8003b52 <UART_SetConfig+0x1b6>
 8003b46:	2bc0      	cmp	r3, #192	; 0xc0
 8003b48:	d009      	beq.n	8003b5e <UART_SetConfig+0x1c2>
 8003b4a:	e00b      	b.n	8003b64 <UART_SetConfig+0x1c8>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e0cb      	b.n	8003cea <UART_SetConfig+0x34e>
 8003b52:	2302      	movs	r3, #2
 8003b54:	77fb      	strb	r3, [r7, #31]
 8003b56:	e0c8      	b.n	8003cea <UART_SetConfig+0x34e>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	e0c5      	b.n	8003cea <UART_SetConfig+0x34e>
 8003b5e:	2308      	movs	r3, #8
 8003b60:	77fb      	strb	r3, [r7, #31]
 8003b62:	e0c2      	b.n	8003cea <UART_SetConfig+0x34e>
 8003b64:	2310      	movs	r3, #16
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	bf00      	nop
 8003b6a:	e0be      	b.n	8003cea <UART_SetConfig+0x34e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a4d      	ldr	r2, [pc, #308]	; (8003ca8 <UART_SetConfig+0x30c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d124      	bne.n	8003bc0 <UART_SetConfig+0x224>
 8003b76:	4b48      	ldr	r3, [pc, #288]	; (8003c98 <UART_SetConfig+0x2fc>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b84:	d012      	beq.n	8003bac <UART_SetConfig+0x210>
 8003b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8a:	d802      	bhi.n	8003b92 <UART_SetConfig+0x1f6>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <UART_SetConfig+0x204>
 8003b90:	e012      	b.n	8003bb8 <UART_SetConfig+0x21c>
 8003b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b96:	d006      	beq.n	8003ba6 <UART_SetConfig+0x20a>
 8003b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9c:	d009      	beq.n	8003bb2 <UART_SetConfig+0x216>
 8003b9e:	e00b      	b.n	8003bb8 <UART_SetConfig+0x21c>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e0a1      	b.n	8003cea <UART_SetConfig+0x34e>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e09e      	b.n	8003cea <UART_SetConfig+0x34e>
 8003bac:	2304      	movs	r3, #4
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e09b      	b.n	8003cea <UART_SetConfig+0x34e>
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e098      	b.n	8003cea <UART_SetConfig+0x34e>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	bf00      	nop
 8003bbe:	e094      	b.n	8003cea <UART_SetConfig+0x34e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a39      	ldr	r2, [pc, #228]	; (8003cac <UART_SetConfig+0x310>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d124      	bne.n	8003c14 <UART_SetConfig+0x278>
 8003bca:	4b33      	ldr	r3, [pc, #204]	; (8003c98 <UART_SetConfig+0x2fc>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd8:	d012      	beq.n	8003c00 <UART_SetConfig+0x264>
 8003bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bde:	d802      	bhi.n	8003be6 <UART_SetConfig+0x24a>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <UART_SetConfig+0x258>
 8003be4:	e012      	b.n	8003c0c <UART_SetConfig+0x270>
 8003be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bea:	d006      	beq.n	8003bfa <UART_SetConfig+0x25e>
 8003bec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bf0:	d009      	beq.n	8003c06 <UART_SetConfig+0x26a>
 8003bf2:	e00b      	b.n	8003c0c <UART_SetConfig+0x270>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e077      	b.n	8003cea <UART_SetConfig+0x34e>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e074      	b.n	8003cea <UART_SetConfig+0x34e>
 8003c00:	2304      	movs	r3, #4
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e071      	b.n	8003cea <UART_SetConfig+0x34e>
 8003c06:	2308      	movs	r3, #8
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e06e      	b.n	8003cea <UART_SetConfig+0x34e>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	bf00      	nop
 8003c12:	e06a      	b.n	8003cea <UART_SetConfig+0x34e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <UART_SetConfig+0x314>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d124      	bne.n	8003c68 <UART_SetConfig+0x2cc>
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <UART_SetConfig+0x2fc>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2c:	d012      	beq.n	8003c54 <UART_SetConfig+0x2b8>
 8003c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c32:	d802      	bhi.n	8003c3a <UART_SetConfig+0x29e>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <UART_SetConfig+0x2ac>
 8003c38:	e012      	b.n	8003c60 <UART_SetConfig+0x2c4>
 8003c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3e:	d006      	beq.n	8003c4e <UART_SetConfig+0x2b2>
 8003c40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c44:	d009      	beq.n	8003c5a <UART_SetConfig+0x2be>
 8003c46:	e00b      	b.n	8003c60 <UART_SetConfig+0x2c4>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e04d      	b.n	8003cea <UART_SetConfig+0x34e>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	e04a      	b.n	8003cea <UART_SetConfig+0x34e>
 8003c54:	2304      	movs	r3, #4
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e047      	b.n	8003cea <UART_SetConfig+0x34e>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e044      	b.n	8003cea <UART_SetConfig+0x34e>
 8003c60:	2310      	movs	r3, #16
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	bf00      	nop
 8003c66:	e040      	b.n	8003cea <UART_SetConfig+0x34e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a11      	ldr	r2, [pc, #68]	; (8003cb4 <UART_SetConfig+0x318>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d139      	bne.n	8003ce6 <UART_SetConfig+0x34a>
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <UART_SetConfig+0x2fc>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c80:	d027      	beq.n	8003cd2 <UART_SetConfig+0x336>
 8003c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c86:	d817      	bhi.n	8003cb8 <UART_SetConfig+0x31c>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01c      	beq.n	8003cc6 <UART_SetConfig+0x32a>
 8003c8c:	e027      	b.n	8003cde <UART_SetConfig+0x342>
 8003c8e:	bf00      	nop
 8003c90:	efff69f3 	.word	0xefff69f3
 8003c94:	40011000 	.word	0x40011000
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40004400 	.word	0x40004400
 8003ca0:	40004800 	.word	0x40004800
 8003ca4:	40004c00 	.word	0x40004c00
 8003ca8:	40005000 	.word	0x40005000
 8003cac:	40011400 	.word	0x40011400
 8003cb0:	40007800 	.word	0x40007800
 8003cb4:	40007c00 	.word	0x40007c00
 8003cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cbc:	d006      	beq.n	8003ccc <UART_SetConfig+0x330>
 8003cbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cc2:	d009      	beq.n	8003cd8 <UART_SetConfig+0x33c>
 8003cc4:	e00b      	b.n	8003cde <UART_SetConfig+0x342>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e00e      	b.n	8003cea <UART_SetConfig+0x34e>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e00b      	b.n	8003cea <UART_SetConfig+0x34e>
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e008      	b.n	8003cea <UART_SetConfig+0x34e>
 8003cd8:	2308      	movs	r3, #8
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e005      	b.n	8003cea <UART_SetConfig+0x34e>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	bf00      	nop
 8003ce4:	e001      	b.n	8003cea <UART_SetConfig+0x34e>
 8003ce6:	2310      	movs	r3, #16
 8003ce8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf2:	d17f      	bne.n	8003df4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003cf4:	7ffb      	ldrb	r3, [r7, #31]
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d85c      	bhi.n	8003db4 <UART_SetConfig+0x418>
 8003cfa:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <UART_SetConfig+0x364>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d25 	.word	0x08003d25
 8003d04:	08003d45 	.word	0x08003d45
 8003d08:	08003d65 	.word	0x08003d65
 8003d0c:	08003db5 	.word	0x08003db5
 8003d10:	08003d7d 	.word	0x08003d7d
 8003d14:	08003db5 	.word	0x08003db5
 8003d18:	08003db5 	.word	0x08003db5
 8003d1c:	08003db5 	.word	0x08003db5
 8003d20:	08003d9d 	.word	0x08003d9d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d24:	f7fe ffe4 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 8003d28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	005a      	lsls	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	441a      	add	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	61bb      	str	r3, [r7, #24]
        break;
 8003d42:	e03a      	b.n	8003dba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7fe ffe8 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 8003d48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	005a      	lsls	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	441a      	add	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	61bb      	str	r3, [r7, #24]
        break;
 8003d62:	e02a      	b.n	8003dba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	085a      	lsrs	r2, r3, #1
 8003d6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ee8 <UART_SetConfig+0x54c>)
 8003d6c:	4413      	add	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6852      	ldr	r2, [r2, #4]
 8003d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	61bb      	str	r3, [r7, #24]
        break;
 8003d7a:	e01e      	b.n	8003dba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7c:	f7fe fed4 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8003d80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	005a      	lsls	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	441a      	add	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	61bb      	str	r3, [r7, #24]
        break;
 8003d9a:	e00e      	b.n	8003dba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	61bb      	str	r3, [r7, #24]
        break;
 8003db2:	e002      	b.n	8003dba <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]
        break;
 8003db8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b0f      	cmp	r3, #15
 8003dbe:	d916      	bls.n	8003dee <UART_SetConfig+0x452>
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc6:	d212      	bcs.n	8003dee <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f023 030f 	bic.w	r3, r3, #15
 8003dd0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	897b      	ldrh	r3, [r7, #10]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	897a      	ldrh	r2, [r7, #10]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	e070      	b.n	8003ed0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
 8003df2:	e06d      	b.n	8003ed0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d859      	bhi.n	8003eae <UART_SetConfig+0x512>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x464>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e43 	.word	0x08003e43
 8003e08:	08003e61 	.word	0x08003e61
 8003e0c:	08003eaf 	.word	0x08003eaf
 8003e10:	08003e79 	.word	0x08003e79
 8003e14:	08003eaf 	.word	0x08003eaf
 8003e18:	08003eaf 	.word	0x08003eaf
 8003e1c:	08003eaf 	.word	0x08003eaf
 8003e20:	08003e97 	.word	0x08003e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7fe ff64 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 8003e28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	085a      	lsrs	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	441a      	add	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	61bb      	str	r3, [r7, #24]
        break;
 8003e40:	e038      	b.n	8003eb4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e42:	f7fe ff69 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 8003e46:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	085a      	lsrs	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	441a      	add	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	61bb      	str	r3, [r7, #24]
        break;
 8003e5e:	e029      	b.n	8003eb4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	085a      	lsrs	r2, r3, #1
 8003e66:	4b21      	ldr	r3, [pc, #132]	; (8003eec <UART_SetConfig+0x550>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	61bb      	str	r3, [r7, #24]
        break;
 8003e76:	e01d      	b.n	8003eb4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e78:	f7fe fe56 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8003e7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	085a      	lsrs	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	441a      	add	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	61bb      	str	r3, [r7, #24]
        break;
 8003e94:	e00e      	b.n	8003eb4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	61bb      	str	r3, [r7, #24]
        break;
 8003eac:	e002      	b.n	8003eb4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
        break;
 8003eb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b0f      	cmp	r3, #15
 8003eb8:	d908      	bls.n	8003ecc <UART_SetConfig+0x530>
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec0:	d204      	bcs.n	8003ecc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	e001      	b.n	8003ed0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	01e84800 	.word	0x01e84800
 8003eec:	00f42400 	.word	0x00f42400

08003ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01a      	beq.n	8004006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fee:	d10a      	bne.n	8004006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af02      	add	r7, sp, #8
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004042:	f7fd f8eb 	bl	800121c <HAL_GetTick>
 8004046:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b08      	cmp	r3, #8
 8004054:	d10e      	bne.n	8004074 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004056:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f82a 	bl	80040be <UART_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e020      	b.n	80040b6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b04      	cmp	r3, #4
 8004080:	d10e      	bne.n	80040a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004082:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f814 	bl	80040be <UART_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e00a      	b.n	80040b6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ce:	e05d      	b.n	800418c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d059      	beq.n	800418c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d8:	f7fd f8a0 	bl	800121c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d302      	bcc.n	80040ee <UART_WaitOnFlagUntilTimeout+0x30>
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d11b      	bne.n	8004126 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e042      	b.n	80041ac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02b      	beq.n	800418c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004142:	d123      	bne.n	800418c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800414c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800415c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e00f      	b.n	80041ac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4013      	ands	r3, r2
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d092      	beq.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c0:	2b21      	cmp	r3, #33	; 0x21
 80041c2:	d12a      	bne.n	800421a <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d110      	bne.n	80041f2 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041de:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ee:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80041f0:	e013      	b.n	800421a <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f6:	781a      	ldrb	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004232:	2b21      	cmp	r3, #33	; 0x21
 8004234:	d12f      	bne.n	8004296 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d110      	bne.n	8004264 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004250:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004260:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004262:	e018      	b.n	8004296 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004268:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004278:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	1c9a      	adds	r2, r3, #2
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042a4:	b084      	sub	sp, #16
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	f107 001c 	add.w	r0, r7, #28
 80042b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d120      	bne.n	80042fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	4b20      	ldr	r3, [pc, #128]	; (8004350 <USB_CoreInit+0xac>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d105      	bne.n	80042f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fa52 	bl	800479c <USB_CoreReset>
 80042f8:	4603      	mov	r3, r0
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e010      	b.n	8004320 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fa46 	bl	800479c <USB_CoreReset>
 8004310:	4603      	mov	r3, r0
 8004312:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	2b01      	cmp	r3, #1
 8004324:	d10b      	bne.n	800433e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f043 0206 	orr.w	r2, r3, #6
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800434a:	b004      	add	sp, #16
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	ffbdffbf 	.word	0xffbdffbf

08004354 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f023 0201 	bic.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d106      	bne.n	80043a2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	60da      	str	r2, [r3, #12]
 80043a0:	e00b      	b.n	80043ba <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	60da      	str	r2, [r3, #12]
 80043b4:	e001      	b.n	80043ba <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e003      	b.n	80043c2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80043ba:	2032      	movs	r0, #50	; 0x32
 80043bc:	f7fc ff3a 	bl	8001234 <HAL_Delay>

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043cc:	b084      	sub	sp, #16
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b086      	sub	sp, #24
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	e009      	b.n	8004400 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3340      	adds	r3, #64	; 0x40
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	2200      	movs	r2, #0
 80043f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	3301      	adds	r3, #1
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b0e      	cmp	r3, #14
 8004404:	d9f2      	bls.n	80043ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d11c      	bne.n	8004446 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800441a:	f043 0302 	orr.w	r3, r3, #2
 800441e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e005      	b.n	8004452 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004458:	461a      	mov	r2, r3
 800445a:	2300      	movs	r3, #0
 800445c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004464:	4619      	mov	r1, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446c:	461a      	mov	r2, r3
 800446e:	680b      	ldr	r3, [r1, #0]
 8004470:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10c      	bne.n	8004492 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d104      	bne.n	8004488 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800447e:	2100      	movs	r1, #0
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f959 	bl	8004738 <USB_SetDevSpeed>
 8004486:	e018      	b.n	80044ba <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004488:	2101      	movs	r1, #1
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f954 	bl	8004738 <USB_SetDevSpeed>
 8004490:	e013      	b.n	80044ba <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004494:	2b03      	cmp	r3, #3
 8004496:	d10c      	bne.n	80044b2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d104      	bne.n	80044a8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800449e:	2100      	movs	r1, #0
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f949 	bl	8004738 <USB_SetDevSpeed>
 80044a6:	e008      	b.n	80044ba <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044a8:	2101      	movs	r1, #1
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f944 	bl	8004738 <USB_SetDevSpeed>
 80044b0:	e003      	b.n	80044ba <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044b2:	2103      	movs	r1, #3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f93f 	bl	8004738 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044ba:	2110      	movs	r1, #16
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8f3 	bl	80046a8 <USB_FlushTxFifo>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f911 	bl	80046f4 <USB_FlushRxFifo>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	461a      	mov	r2, r3
 80044e4:	2300      	movs	r3, #0
 80044e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ee:	461a      	mov	r2, r3
 80044f0:	2300      	movs	r3, #0
 80044f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fa:	461a      	mov	r2, r3
 80044fc:	2300      	movs	r3, #0
 80044fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	e043      	b.n	800458e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800451c:	d118      	bne.n	8004550 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	461a      	mov	r2, r3
 8004532:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	e013      	b.n	8004562 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004546:	461a      	mov	r2, r3
 8004548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e008      	b.n	8004562 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455c:	461a      	mov	r2, r3
 800455e:	2300      	movs	r3, #0
 8004560:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	461a      	mov	r2, r3
 8004570:	2300      	movs	r3, #0
 8004572:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004580:	461a      	mov	r2, r3
 8004582:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004586:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	3301      	adds	r3, #1
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	429a      	cmp	r2, r3
 8004594:	d3b7      	bcc.n	8004506 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	e043      	b.n	8004624 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045b2:	d118      	bne.n	80045e6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c6:	461a      	mov	r2, r3
 80045c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e013      	b.n	80045f8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045dc:	461a      	mov	r2, r3
 80045de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	e008      	b.n	80045f8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	461a      	mov	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	461a      	mov	r2, r3
 8004606:	2300      	movs	r3, #0
 8004608:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004616:	461a      	mov	r2, r3
 8004618:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800461c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	3301      	adds	r3, #1
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	429a      	cmp	r2, r3
 800462a:	d3b7      	bcc.n	800459c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800463a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800463e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800464c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f043 0210 	orr.w	r2, r3, #16
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <USB_DevInit+0x2d4>)
 8004666:	4313      	orrs	r3, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800466c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f043 0208 	orr.w	r2, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800467e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d105      	bne.n	8004690 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <USB_DevInit+0x2d8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004690:	7dfb      	ldrb	r3, [r7, #23]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800469c:	b004      	add	sp, #16
 800469e:	4770      	bx	lr
 80046a0:	803c3800 	.word	0x803c3800
 80046a4:	40000004 	.word	0x40000004

080046a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	019b      	lsls	r3, r3, #6
 80046ba:	f043 0220 	orr.w	r2, r3, #32
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3301      	adds	r3, #1
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a09      	ldr	r2, [pc, #36]	; (80046f0 <USB_FlushTxFifo+0x48>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e006      	b.n	80046e2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d0f0      	beq.n	80046c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	00030d40 	.word	0x00030d40

080046f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2210      	movs	r2, #16
 8004704:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3301      	adds	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <USB_FlushRxFifo+0x40>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e006      	b.n	8004726 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	2b10      	cmp	r3, #16
 8004722:	d0f0      	beq.n	8004706 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	00030d40 	.word	0x00030d40

08004738 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	68f9      	ldr	r1, [r7, #12]
 8004754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004784:	f043 0302 	orr.w	r3, r3, #2
 8004788:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800478a:	2003      	movs	r0, #3
 800478c:	f7fc fd52 	bl	8001234 <HAL_Delay>

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a13      	ldr	r2, [pc, #76]	; (8004800 <USB_CoreReset+0x64>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e01b      	b.n	80047f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	daf2      	bge.n	80047a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3301      	adds	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4a09      	ldr	r2, [pc, #36]	; (8004800 <USB_CoreReset+0x64>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d901      	bls.n	80047e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e006      	b.n	80047f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d0f0      	beq.n	80047d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	00030d40 	.word	0x00030d40

08004804 <__libc_init_array>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	4e0d      	ldr	r6, [pc, #52]	; (800483c <__libc_init_array+0x38>)
 8004808:	4c0d      	ldr	r4, [pc, #52]	; (8004840 <__libc_init_array+0x3c>)
 800480a:	1ba4      	subs	r4, r4, r6
 800480c:	10a4      	asrs	r4, r4, #2
 800480e:	2500      	movs	r5, #0
 8004810:	42a5      	cmp	r5, r4
 8004812:	d109      	bne.n	8004828 <__libc_init_array+0x24>
 8004814:	4e0b      	ldr	r6, [pc, #44]	; (8004844 <__libc_init_array+0x40>)
 8004816:	4c0c      	ldr	r4, [pc, #48]	; (8004848 <__libc_init_array+0x44>)
 8004818:	f000 f820 	bl	800485c <_init>
 800481c:	1ba4      	subs	r4, r4, r6
 800481e:	10a4      	asrs	r4, r4, #2
 8004820:	2500      	movs	r5, #0
 8004822:	42a5      	cmp	r5, r4
 8004824:	d105      	bne.n	8004832 <__libc_init_array+0x2e>
 8004826:	bd70      	pop	{r4, r5, r6, pc}
 8004828:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800482c:	4798      	blx	r3
 800482e:	3501      	adds	r5, #1
 8004830:	e7ee      	b.n	8004810 <__libc_init_array+0xc>
 8004832:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004836:	4798      	blx	r3
 8004838:	3501      	adds	r5, #1
 800483a:	e7f2      	b.n	8004822 <__libc_init_array+0x1e>
 800483c:	08004954 	.word	0x08004954
 8004840:	08004954 	.word	0x08004954
 8004844:	08004954 	.word	0x08004954
 8004848:	08004958 	.word	0x08004958

0800484c <memset>:
 800484c:	4402      	add	r2, r0
 800484e:	4603      	mov	r3, r0
 8004850:	4293      	cmp	r3, r2
 8004852:	d100      	bne.n	8004856 <memset+0xa>
 8004854:	4770      	bx	lr
 8004856:	f803 1b01 	strb.w	r1, [r3], #1
 800485a:	e7f9      	b.n	8004850 <memset+0x4>

0800485c <_init>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr

08004868 <_fini>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr
